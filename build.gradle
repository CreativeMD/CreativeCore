buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://plugins.gradle.org/m2/' }
		mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
		classpath 'org.spongepowered:mixingradle:0.7'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'

apply plugin: 'org.spongepowered.mixin'

repositories {
    maven { url 'https://www.dogforce-games.com/maven/' }
    maven { // Patchouli
        url "https://maven.blamejared.com"
    }
    maven { // TOP
        url "https://maven.k-4u.nl"
    }
}

group= "team.creative" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: "2022.03.13-1.18.2"
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
			
			property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                creativecore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
			
			property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                creativecore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
			
			property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'creativecore', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                creativecore {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	
	// Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}") {
        transitive = false
    }
}

jar {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
  archiveFileName.set(project.modname + "_FORGE_v" + project.version + "_mc" + project.minecraft_version + ".jar")
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'creativecore.mixins.refmap.json'
     
    config 'creativecore.mixins.json'
}

jar {
    manifest {
	    attributes([
			"Specification-Title": "creativecore",
			"Specification-Vendor": "CreativeMD",
			"Specification-Version": "1",
			"Implementation-Title": project.name,
			"Implementation-Version"  : project.jar.archiveVersion,
			"Implementation-Vendor": "CreativeMD",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

